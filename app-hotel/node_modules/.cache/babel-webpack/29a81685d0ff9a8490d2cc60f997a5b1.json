{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CustomerService = /*#__PURE__*/(() => {\n  class CustomerService {\n    constructor(http) {\n      this.http = http; // static getCustomers() {\n      //   throw new Error('Method not implemented.');\n      // }\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-type': 'application/json'\n        })\n      };\n      this.baseUrl = \"http://localhost:8090\";\n    }\n\n    log(message) {\n      console.log(`CustomerService: ${message}`);\n    }\n\n    getCustomers() {\n      return this.http.get(this.baseUrl + \"/customers\").pipe(tap(_ => this.log('fetched customers')), catchError(this.handleError('getCustomers', [])));\n    }\n\n    postCustomer(cust) {\n      return this.http.post(this.baseUrl + \"/customers\", cust).subscribe(status => console.log(JSON.stringify(status)));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n  }\n\n  CustomerService.ɵfac = function CustomerService_Factory(t) {\n    return new (t || CustomerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  CustomerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomerService,\n    factory: CustomerService.ɵfac,\n    providedIn: 'root'\n  });\n  return CustomerService;\n})();","map":null,"metadata":{},"sourceType":"module"}